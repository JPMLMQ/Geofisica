import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from scipy.signal import ricker

# Configurações iniciais
Nx = 501
dx_rec = 25
Nz = 1501
dz = 1
Nt = 6001
dt = 0.001

# Criando as posições dos receptores e das fontes
rec_x = np.arange(0, Nx, dx_rec) 
recindex = np.arange(1, len(rec_x) + 1)
shot_x = [0, (Nx - 1) / 2]
shotindex = [1, 2]

index = np.concatenate((recindex, shotindex))
tabela = np.zeros((len(index), 3))

for i in range(len(rec_x)):
    tabela[i, 0] = recindex[i]   
    tabela[i, 1] = rec_x[i]  
    tabela[i, 2] = 0     

for i in range(len(shot_x)):
    tabela[len(recindex) + i, 0] = shotindex[i] 
    tabela[len(recindex) + i, 1] = shot_x[i] 
    tabela[len(recindex) + i, 2] = 0   

df_tabela = pd.DataFrame(tabela, columns=["Index", "x (m)", "z (m)"])

# Definição das interfaces e densidades
h = 1000  # Profundidade
v1 = 1500 # Velocidade da primeira camada
v2 = 4000 # Velocidade da segunda camada

# Definindo a seção geológica
x = np.linspace(0, dx_rec * (Nx - 1), Nx)
t_direct = x / v1  # Tempo para a onda direta
t_ref = np.sqrt((2 * h / v1)**2 + (x / v1)**2)  # Tempo para a onda refletida
t_hw = x / v2 + (2 * h * np.sqrt(v2**2 - v1**2)) / (v1 * v2)  # Tempo para a head wave
t_gr = x / 400  # Tempo para o ground roll
t_gr += h / v2  # Ground roll como uma onda que viaja ao longo da superfície

# Criando o sismograma
sism = np.zeros((Nt, Nx))

for ix in range(Nx):
    # Calcular índices correspondentes a cada onda
    k = int(t_direct[ix] / dt)
    y = int(t_ref[ix] / dt)
    z = int(t_hw[ix] / dt)
    u = int(t_gr[ix] / dt)

    # Verificar os índices e adicionar a amplitude ao sismograma
    if k < Nt:
        sism[k, ix] = 1  # Amplitude da onda direta
    if y < Nt:
        sism[y, ix] = 0.5  # Amplitude da onda refletida
    if z < Nt:
        sism[z, ix] = 0.3  # Amplitude da head wave
    if u < Nt:
        sism[u, ix] = 0.2  # Amplitude do ground roll

# Convolução com a wavelet
wavelet = ricker(Nt, 4)
for x in range(Nx):
    sism[:, x] = np.convolve(sism[:, x], wavelet, mode='same')

# Plotando a seção geológica
plt.figure(figsize=(12, 10))
plt.subplot(2, 1, 1)
plt.imshow(sism, cmap="seismic", aspect="auto", extent=[0, dx_rec * (Nx - 1), Nt * dt, 0])
plt.colorbar(label='Amplitude')
plt.title("Sismograma")
plt.xlabel("Distância lateral (m)")
plt.ylabel("Tempo (s)")
plt.scatter(tabela[:, 1], tabela[:, 2], c='white', marker='o', label='Receptores e Fontes')
plt.legend()

# Plotando as ondas no gráfico de tempo
plt.subplot(2, 1, 2)
plt.plot(x, t_direct, label="Onda Direta", linestyle='--')
plt.plot(x, t_ref, label="Onda Refletida", linestyle='--')
plt.plot(x, t_hw, label="Head Wave", linestyle='--')
plt.plot(x, t_gr, label="Ground Roll", linestyle='--')
plt.ylim(0, t[-1])
plt.xlim(0, dx_rec * (Nx - 1))  # Certificar que o eixo x está no mesmo limite
plt.xlabel('Distância horizontal (m)')
plt.ylabel('Tempo (s)')
plt.title("Propagação das Ondas")
plt.grid(True)
plt.legend()

plt.tight_layout()
plt.show()
